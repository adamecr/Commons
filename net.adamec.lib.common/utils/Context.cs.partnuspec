<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
  <metadata>
    <id>RadCommons.utils.Context</id>
    <description>The runtime "container" for context operations.  The context can be both state-less and state-full and it's valid until it's disposed.
 The current context is accessible via static property Current.
 The contexts are chained, when a new context is created using static method BeginContext(),
 the Current context became the Parent of the new one and
 the newly created context will be set as the Current one.
 When the context is disposed, the Current context is set to Parent of disposing context.
 The base implementation just manages the life time, context chain and keeps the state (when provided).
 Inherit from the Context&lt;TState&gt; to add the context related operations (inherited classes have the access to state).
 Based on the implementation of Guard Scopes by  https://github.com/safakgur.
 (Source only package).</description>
    <tags>RadCommons source-only disposable context</tags>
    <contentFiles>
      <files include="cs/**/*.*" buildAction="Compile" />
    </contentFiles>
    <dependencies>
      <dependency id="RadCommons.utils.Disposer" include="all" version="%%CURRENT_VERSION%%" />
    </dependencies>
  </metadata>
  <files>
    <file src="Context.cs" target="content\App_Packages\RadCommons.utils.Context\Context.cs" />
    <file src="Context.cs" target="contentFiles\cs\any\App_Packages\RadCommons.utils.Context\Context.cs" />
  </files>
</package>